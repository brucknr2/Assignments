Title       : Research Initiation Award: Specification-Based Testing and Analysis of
               Concurrent Software
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 22,  1994    
File        : a9309043

Award Number: 9309043
Award Instr.: Standard Grant                               
Prgm Manager: Frank D. Anger                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : August 1,  1993     
Expires     : January 31,  1998    (Estimated)
Expected
Total Amt.  : $90000              (Estimated)
Investigator: Richard H. Carver rcarver@cs.gmu.edu  (Principal Investigator current)
Sponsor     : George Mason University
	      4400 University Drive
	      Fairfax, VA  220304443    703/993-1000

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9218,
Abstract    :
              9309043  Carver  Specification-based development provides a rigorous and 
              definitive basis for comparing the intended and actual  behavior of a
              concurrent program.    Nondeterministic behavior of concurrent programs creates
              the  following problem during testing: when testing P with input X,  a single
              execution is insufficient to determine the  correctness of P with input X. 
              Even if P with input X has  been executed successfully many times, it is
              possible that a  future execution of P with input X will produce an incorrect 
              result.  To deal with this problem, we force deterministic  executions of P
              according to given synchronization sequences.   Test sequences can be selected
              from P or from its  specification.  We will investigate how to derive
              constraints  from specifications.  Constraints derived from a specification 
              can be compared with the actual constraints derived from  source code in order
              to detect errors.    Concurrent programs will be formally specified using
              process  algebras and temporal logic.  New techniques and tools will be 
              incorporated into an existing validation environment to  support both
              specification and program-based testing and  analysis.  ***
