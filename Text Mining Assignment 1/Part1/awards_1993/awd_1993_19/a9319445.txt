Title       : High-Performance Synchronization for Shared-Memory Parallel Programs
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : March 29,  1994     
File        : a9319445

Award Number: 9319445
Award Instr.: Standard Grant                               
Prgm Manager: Mukesh Singhal                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : April 1,  1994      
Expires     : September 30,  1997  (Estimated)
Expected
Total Amt.  : $185703             (Estimated)
Investigator: Michael L. Scott scott@cs.rochester.edu  (Principal Investigator current)
Sponsor     : University of Rochester
	      
	      Rochester, NY  14627    585/275-4031

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9139,9148,MANU,
Abstract    :
              9319445  Scott       The goal of this research is to develop and evaluate 
              synchronization techniques on very large scale shared memory  mutliprocessor
              systems.  With increases in size and  availability of parallel processors,
              high-performance  synchronization has become a critical factor in overall 
              application performance and scalability.  Among the  techniques for
              synchronization include special-purpose  hardware, active messages, lock-free
              data structures, and  scalable software synchronization algorithms based on
              atomic  fetch-and-o instructions.  The choice of the synchronization  approach
              plays a significant role on the overall  performance.       The PI proposes to
              concentrate his research on  1)comparative evaluation of software
              synchronization, lock-  free data structures, active messages and
              special-purpose  hardware primitives, 2)new synchronization algorithms that 
              scale with the number of processors and utilize the  available atomic
              instructions, and 3) new mechanisms for  cooperative synchronization and
              scheduling which minimize  the unnecessary spinning on locks, maximize
              processor  locality and avoid contention for both lock and nonlock  data.  ***
