Title       : A Broader Basis for Logic Programming
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : March 2,  1993      
File        : a9004357

Award Number: 9004357
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1990  
Expires     : August 31,  1993     (Estimated)
Expected
Total Amt.  : $179463             (Estimated)
Investigator: Bharadwaj Jayaraman bharat@cse.buffalo.edu  (Principal Investigator current)
Sponsor     : SUNY Buffalo
	      501 Capen Hall
	      Buffalo, NY  14260    716/645-2977

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 
Abstract    :
              Logic programming is usually taken to be synonymous with relational            
              programming.  Two important criteria for a broader logic programming           
              language are its ability to avoid extra-logical features, such as cut,         
              assert, retract, etc., and its amenability to efficient compilation.           
              The broader basis consists of three logical forms:  equations,                 
              relations, and subset assertions, along with an accompanying set of            
              matching and unification operations.  Equations provide the ability to         
              define deterministic operations without Prolog's cut.  Subset                  
              assertions can be used to define more declaratively Prolog's setof as          
              well as transitive-closure operations, both of which are traditionally         
              expressed using assert and retract.  To demonstrate that this broader          
              framework is practical, further studies will be made in (1) better             
              integrating the three logical forms, (2) developing an efficient               
              implementation, (3) carrying out substantial applications, and (4)             
              examining useful extensions and variations.
