Title       : Improving Performance With Assertions
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : November 29,  1990  
File        : a9014576

Award Number: 9014576
Award Instr.: Standard Grant                               
Prgm Manager: John D. Gannon                          
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 15,  1990 
Expires     : February 28,  1993   (Estimated)
Expected
Total Amt.  : $123866             (Estimated)
Investigator: Ralph E. Johnson   (Principal Investigator current)
Sponsor     : U of Ill Urbana-Champaign
	      801 South Wright Street
	      Champaign, IL  61820    217/333-2186

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2880,9289,
Abstract    :
              Once a program has been written, it can be checked against its                 
              specification either statically (i.e. program verification) or                 
              dynamically (i.e. testing).  The project merges these techniques by            
              assuming that assertions are always checked dynamically but optimizing         
              away as many checks as possible.  Thus, program verification                   
              becomes a special case of code optimization.  Code optimization and            
              program verification will be linked by using the specification for             
              program components to optimize the programs that use them.  Program            
              components with specifications are likely to be faster than those              
              without, thus encouraging programmers to specify them.  The project            
              will also study how to provide performance information so that the             
              programmer can see how to add assertions to improve performance and            
              can see when components are used incorrectly.  The project will use            
              the TS compiler for Typed Smalltalk and the mu-ral interactive theorem         
              prover.
