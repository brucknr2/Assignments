Title       : Presidential Young Investigator Award: "Semantics-based Generation of Optimizing
               Compilers"
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 6,  1994     
File        : a9057567

Award Number: 9057567
Award Instr.: Continuing grant                             
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  1990    
Expires     : March 31,  1995      (Estimated)
Expected
Total Amt.  : $150000             (Estimated)
Investigator: Peter Lee petel@cs.cmu.edu  (Principal Investigator current)
Sponsor     : Carnegie Mellon University
	      5000 Forbes Avenue
	      Pittsburgh, PA  152133815    412/268-5835

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2875,9216,9227,HPCC,
Abstract    :
              It is becoming standard practice to write formal descriptions of               
              programming languages.  The fundamental benefit of a "formal                   
              semantics" is that it constitutes an unambiguous standard of reference         
              against which questions about the meaning of programs can be answered.         
              Also, it serves as the basis for mathematical reasoning about                  
              programs, for instance for the purposes of optimization.  While these          
              certainly are practical benefits, other pragmatic aspects of languages         
              are not normally reflected in a formal semantics, such as the                  
              distinction between compile-time and run-time, whether automatic               
              garbage collection is needed, and so on.                                       
                                                                                             
              In previous research, a technique called "high-level semantics" was            
              proposed which addressed some of these issues.  The main result was            
              that for Pascal-like languages, high-level semantics allows one to             
              generate realistic compilers automatically.  Unfortunately, this               
              technique does not extend easily to more advanced languages                    
              incorporating such notions as polymorphism, nonstrictness, concurrency         
              and so forth.  Low-level features such as pointer arithmetic and               
              volatile variables also prevent problems.  Perhaps most importantly,           
              semantics-based optimization techniques are hard to incorporate.               
                                                                                             
              In this project, techniques for formally describing and automatically          
              implementing such advanced languages features and optimizations will           
              be developed.  The goal is to automatically generate nearly practical          
              compilers for advanced languages.
