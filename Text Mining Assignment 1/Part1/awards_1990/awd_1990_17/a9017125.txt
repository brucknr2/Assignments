Title       : Logic and Complexity of Type Inference in Programming Languages
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : November 19,  1991  
File        : a9017125

Award Number: 9017125
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : January 1,  1991    
Expires     : June 30,  1993       (Estimated)
Expected
Total Amt.  : $93635              (Estimated)
Investigator: Harry G. Mairson   (Principal Investigator current)
Sponsor     : Brandeis University
	      P.O. Box 549110
	      Waltham, MA  024549110    781/736-2121

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 
Abstract    :
              This is a detailed study of the logic and complexity of type                   
              inference, with applications to functional and logic programming               
              languages.  The typed lambda calculus provides a functional "simplest"         
              such language for this research.  Computation can be embedded in type          
              disciplines for this language, and complexity results concerning the           
              decision process of typability can be derived for natural extensions           
              to the language, including ML-style let-polymorphism, fixed point              
              operators, and second-order polymorphic lambda calculus.  Other                
              complex forms of typing will be analyzed, complexity- and unification-         
              related models of computation.  The phenomenon of boundedness in               
              database logic programs, and the relationship between deciding                 
              typability and actually computing types will be studied.
