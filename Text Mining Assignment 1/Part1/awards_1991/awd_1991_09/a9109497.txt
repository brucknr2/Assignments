Title       : Wait-Free Shared Data Objects: Building Blocks for Fault Tolerance
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 19,  1993    
File        : a9109497

Award Number: 9109497
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : June 1,  1991       
Expires     : November 30,  1994   (Estimated)
Expected
Total Amt.  : $69999              (Estimated)
Investigator: James H. Anderson  (Principal Investigator current)
              Satish K. Tripathi   (Principal Investigator current)
Sponsor     : U of MD College Park
	      3112 Lee Building
	      College Park, MD  207425141    301/405-6269

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9264,
Abstract    :
              An implementation of a shared data object is wait-free if the                  
              operations of the data object are implemented without any unbounded            
              busy-waiting loops or idle-waiting primitives.  Wait-free shared data          
              objects are inherently resilient to fail-stop faults:  a process that          
              fails (i.e., stops its execution) while accessing such a data object           
              cannot block the progress of any other process; intuitively, a faulty          
              process has the same effect on other processes as a very slow one.             
              Two research projects are contained herein, both of which extend               
              previous work on wit-free shared data objects.  The first project              
              considers the implementation of wait-free shared data objects with             
              read-modify-write operations.  Such operations lie at the heart of             
              many transaction processing applications; thus, because wait-free              
              shared data objects are inherently fault tolerant, this work offers an         
              attractive alternative to more traditional transaction processing              
              schemes, such as checkpointing, logging, timeouts, etc.  The second            
              project considers the construction of wait-free shared data objects in         
              message-passing systems.  Such data objects provide the illusion of a          
              fault-tolerant, virtual shared memory machine, and thus allow                  
              programmers to think in terms of shared memory when designing fault-           
              tolerant algorithms for message-passing systems.
