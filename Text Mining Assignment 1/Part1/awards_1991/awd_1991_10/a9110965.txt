Title       : RUI: Evaluating Decomposition Slicing as a Software Maintenance Methodology
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : January 27,  1995   
File        : a9110965

Award Number: 9110965
Award Instr.: Standard Grant                               
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : September 1,  1991  
Expires     : February 28,  1994   (Estimated)
Expected
Total Amt.  : $59530              (Estimated)
Investigator: Keith B. Gallagher   (Principal Investigator current)
Sponsor     : Loyola College in Maryland
	      4501 North Charles Street
	      Baltimore, MD  212102601    301/323-1010

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9229,
Abstract    :
              Software maintenance is the process of designing and integrating               
              consistent changes to an existing software system.  Doing effective            
              maintenance is a complex task due in part to the size and complexity           
              of the maintained software, and the widely varying maintenance support         
              tools and environments that are available.  These problems are                 
              compounded since most existing software produced prior to the use of           
              structured techniques.  It is difficult for the maintainer to                  
              ascertain the complete effect of a code change.  Decomposition                 
              slicing yields guidelines for maintainers to use so that changes can           
              be assured to be completely contained in the components under                  
              consideration and that there are no undetected linkages between the            
              modified and unmodified code.  Thus the impact of changes can be               
              assessed.  The decomposition can also be used to limit the amount of           
              testing required to assure that the change is correct.  The goal of            
              this research is to scale up this methodology and validate its                 
              effectiveness on large software systems by an empirical evaluation.
