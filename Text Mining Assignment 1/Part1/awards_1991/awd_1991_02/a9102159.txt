Title       : Design and Implementation of a Higher-Order Logic Programming Language
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : March 6,  1995      
File        : a9102159

Award Number: 9102159
Award Instr.: Continuing grant                             
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 1,  1991       
Expires     : December 31,  1994   (Estimated)
Expected
Total Amt.  : $354822             (Estimated)
Investigator: Michael Kifer kifer@cs.sunysb.edu  (Principal Investigator current)
              David S. Warren  (Co-Principal Investigator current)
              I. V. Ramakrishnan  (Co-Principal Investigator current)
Sponsor     : SUNY Stony Brook
	      
	      Stony Brook, NY  117943362    631/632-9949

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2875,
Abstract    :
              HiLog is an untyped logic with a higher-order syntax and a first-order         
              semantics.  This project will extend the theory of HiLog, design a             
              Horn-clause logic programming language based on HiLog, and develop an          
              efficient implementation of this language.  The goal is to develop a           
              more powerful system than is currently available for declarative               
              programming.  HiLog permits variables over predicates and thus                 
              supports a more powerful programming and metaprogramming style.  It            
              also lets the programmer construct new predicate names using function          
              symbols, which leads to a simple and clean methodology for modular             
              programming in HiLog.  However, the semantics of the new language is           
              first-order so that an implementation of efficiency comparable to              
              Prolog is achievable.  The eventual implementation will use newly              
              developed indexing techniques to increase its efficiency.  It will             
              support a low-level (WAM-based) implementation of the extension-table          
              evaluation technique to provide a complete logical evaluation of               
              queries.  The extension-table techniques will be extended to support a         
              more complete implementation of negation in logic programs based on            
              the well-founded semantics.  The system will be a powerful prototyping         
              tool that can help in the development of robust software more                  
              quickly.
