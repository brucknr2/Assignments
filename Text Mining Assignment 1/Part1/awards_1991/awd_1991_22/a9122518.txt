Title       : Fully Abstract Semantics for Practical Languages
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 5,  1994       
File        : a9122518

Award Number: 9122518
Award Instr.: Continuing grant                             
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 1,  1992       
Expires     : December 31,  1996   (Estimated)
Expected
Total Amt.  : $437922             (Estimated)
Investigator: Robert S. Cartwright cork@rice.edu  (Principal Investigator current)
              Matthias Felleisen  (Co-Principal Investigator current)
Sponsor     : William Marsh Rice Univ
	      6100 Main Street, MS-16
	      Houston, TX  772511892    713/348-4820

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9216,HPCC,
Abstract    :
              Semantic definitions for programming languages which are fully                 
              abstract are needed in the construction of a mathematical framework            
              for program optimization.  In particular, the observable behavior of           
              program phrases in practical languages needs to be captured.  Today,           
              denotational language specifications often make artificial                     
              distinctions between program phrases with indistinguishable behavior.          
                                                                                             
                                                                                             
              A new approach based upon a realistic treatment of error values and            
              error propagation in models is utilized in this project.  Sequential           
              functions form an ordinary Scott-domain under pointwise ordering in            
              the presence of error elements and can be represented as decision              
              trees.  This helps to implicitly describe how errors are propagated.           
              This approach will be used to define practical languages such as               
              FORTRAN, Pascal, C, ML, and Scheme.
