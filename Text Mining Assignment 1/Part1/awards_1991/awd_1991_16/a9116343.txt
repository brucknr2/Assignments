Title       : Latency and Overhead in Transparent Distributed Rollback- Recovery
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 5,  1994       
File        : a9116343

Award Number: 9116343
Award Instr.: Continuing grant                             
Prgm Manager: Anand R. Tripathi                       
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 1,  1992       
Expires     : December 31,  1994   (Estimated)
Expected
Total Amt.  : $313184             (Estimated)
Investigator: Willy Zwaenepoel willy@rice.edu  (Principal Investigator current)
              David B. Johnson  (Co-Principal Investigator current)
Sponsor     : William Marsh Rice Univ
	      6100 Main Street, MS-16
	      Houston, TX  772511892    713/348-4820

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 0000,2876,9216,OTHR,
Abstract    :
              This research investigates the tradeoff between failure-free overhead          
              and output latency in transparent distributed rollback-recovery.  This         
              tradeoff arises because, with rollback-recovery, output to the                 
              "outside world" must be delayed until enough recovery information is           
              recorded on stable storage to guarantee that if a failure occurs, the          
              system will never roll back to a state preceding the one from which            
              the output was performed.  The resulting latency can be reduced by             
              keeping recovery information on stable storage closely up-to-date              
              during failure-free operation, but at the expense of extra failure-            
              free overhead.                                                                 
                                                                                             
              The work includes an investigation of how rollback-recovery methods            
              based on logging can be extended to support nondeterministic process           
              execution, occurring, for instance, as a result of multithreading.             
              Nondeterministic events are recorded on stable storage, and are used           
              during failure recovery to replay the same events.  For example, by            
              recording the execution of synchronization primitives such as                  
              semaphores, one can support multithreading in which all access to              
              shared data is protected by these synchronization primitives.                  
              Checkpoints offer an alternative for processes for which recording             
              nondeterministic events is impossible or is too expensive.
