Title       : Parallel Symbolic Programming
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : September 14,  1993 
File        : a9101035

Award Number: 9101035
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : November 15,  1991  
Expires     : December 31,  1994   (Estimated)
Expected
Total Amt.  : $163193             (Estimated)
Investigator: James R. Larus larus@cs.wisc.edu  (Principal Investigator current)
Sponsor     : U of Wisconsin Madison
	      750 University Ave
	      Madison, WI  537061490    608/262-3822

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 
Abstract    :
                   Our ability to understand and effectively use parallel computers          
              lags far behind our ability to build them.  The inherent complexity of         
              parallelism causes some of the difficulty.  However, programming               
              languages must also take some blame since they have not provided               
              adequate support for understanding, expressing, or managing                    
              parallelism.                                                                   
              This research addresses the problem of expressing, programming, and            
              debugging complex, symbolic applications on parallel computers.  Based         
              on past experience with compiling Lisp programs for parallel computers         
              and recent simulations of C programs, this research attempts to                
              establish that existing languages are inappropriate for parallel               
              symbolic computation.  It pursues two new approaches to language               
              design--large- grain data parallelism and parallel abstract data               
              types--that will produce languages better suited to expressing and             
              compiling parallel programs.
