Title       : Computation in Refinement Logics for Type Theory
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 23,  1992      
File        : a9108062

Award Number: 9108062
Award Instr.: Continuing grant                             
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  1991    
Expires     : March 31,  1996      (Estimated)
Expected
Total Amt.  : $306036             (Estimated)
Investigator: Robert L. Constable rc@cs.cornell.edu  (Principal Investigator current)
Sponsor     : Cornell University-Endowed
	      Office of Sponsored Programs
	      Ithaca, NY  148532801    607/255-5014

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 
Abstract    :
              Computer science is concerned with building abstract structure in              
              "information space".  There are so many applications in other fields           
              because these structures are so general and because computer hardware          
              can realize them.  Computer Scientist study the laws that govern the           
              processing of information, and they create tools to assist in the              
              task of building structures, testing and understanding them.  Among            
              the most powerful tools provided so far are programming languages and          
              environments.  But the field is now converging on ways to extend these         
              environments to more powerful and general tools, called problem                
              solving environments.  This proposal is about the mathematical basis           
              for one class of such system.                                                  
                                                                                             
              The class of systems studied here is characterized by its relationship         
              to logic.  It has been discovered that a certain kind of formal logic          
              provides a basis for both functional programming languages and problem         
              solving environments.  The idea is that constructive mathematical              
              proofs can be interpreted as functional programs.  This notion has now         
              been studied for over a decade and tested in practice.  Results have           
              encouraged a much deeper study because the programming method                  
              suggested by these systems seems to be more reliable than ordinary             
              programming and much more powerful.  It is able to draw on results             
              from theorem proving, logic programming and rigorous programming               
              methodology.  This work is concerned with details of how to bring              
              these elements together.                                                       
                                                                                             
              It is possible that the discoveries made in this area will                     
              significantly change the way people program and the way they solve             
              certain kinds of precise problems.  The area is currently the focus of         
              a concerted effort in Britain, France, Sweden, Germany, and the U.S.           
              Researchers feel that soon systems of the kind being tested will be            
              widely used beyond the computer science laboratory.  This research             
              addresses some of the central theoretical problems that must be solved         
              before that can happen.  In particular it is concerned with certain            
              ways that these systems can be augmented by their users (reflection)           
              and with ways that decisions about solving a problem can be postponed          
              in the process of systematic goal-directed problem-solving (or                 
              equivalently program development).  The idea for postponement centers          
              on the use of a special kind of variable called a logic variable.              
              Results from this investigation will deepen understanding of the               
              relationship between various uses of logic variables and reflection            
              in other parts of computer science and logic and find use in the               
              design of the next generation of problem solving environments.
