Title       : Formal Specification for C++ Programs
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : June 27,  1991      
File        : a9108654

Award Number: 9108654
Award Instr.: Standard Grant                               
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 15,  1991      
Expires     : December 31,  1993   (Estimated)
Expected
Total Amt.  : $55282              (Estimated)
Investigator: Gary T. Leavens leavens@cs.iastate.edu  (Principal Investigator current)
Sponsor     : Iowa State University
	      2207 Pearson Hall, Room 15
	      Ames, IA  500112207    515/294-5225

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2880,9264,
Abstract    :
              The objectives of this project are: to help programmers formally               
              specify the interfaces of modules in the object-oriented programming           
              language C++, and to help programmers reason about the correctness of          
              programs that use message passing and inheritance.  Work on                    
              specification will involve designing and formally defining an                  
              interface specification language for C++, and testing the utility of           
              the specification language on several examples.  The specification             
              language, Larch/C++, will use subtype relationships and overloading            
              within assertions to specify polymorphic modules.  Work on                     
              verification will involve fundamental studies to understand properties         
              that specification language should be able to express.  These                  
              properties include relationships between specifications such as                
              refinement and subtyping, how to use inheritance in specifications,            
              and ways to reason about mutation and aliasing.  While such studies            
              may eventually lead to formal methods for the verification of C++              
              programs, the emphasis will be on learning how to specify the                  
              properties that need to be proved.  The project would promote the              
              reuse of designs and program modules, and would help guide reasoning           
              about C++ programs.  The techniques developed would also be applicable         
              to other object-oriented languages.
