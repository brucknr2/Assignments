Title       : The Chare Kernal Parallel Programming System
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : August 19,  1993    
File        : a9106608

Award Number: 9106608
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : December 1,  1991   
Expires     : October 31,  1994    (Estimated)
Expected
Total Amt.  : $199650             (Estimated)
Investigator: Laxmikant V. Kale kale@cs.uiuc.edu  (Principal Investigator current)
Sponsor     : U of Ill Urbana-Champaign
	      801 South Wright Street
	      Champaign, IL  61820    217/333-2186

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 
Abstract    :
              All common approaches to parallelizing compilers, high-level                   
              languages such as functional languages, and explicitly parallel                
              languages - require a common base of support.  This work will                  
              encapsulate this support in a language that abstracts over resource            
              management decisions and machine details, and develops a runtime               
              support system on different classes of MIMD machines for implementing          
              this language.  The language can then be used by implementors of other         
              high level approaches to parallel programming as a universal and               
              efficient back-end.  It can also be used for efficient application             
              programming.  The language and the runtime system will support dynamic         
              load balancing, and small to medium computational grainsize, to meet           
              the above objectives.  For expressiveness as well as efficiency, the           
              language will support a rich set of primitives for expressing specific         
              forms of information sharing.                                                  
                                                                                             
              The runtime support system for the language has been implemented               
              already on distributed memory machines such as iPSC/2, and shared              
              memory machines such as Sequent Symmetry, and a preliminary compiler           
              has been written.  Performance results on these machines have been             
              obtained on simple benchmarks and are very encouraging: they show              
              that we can obtain excellent speedups with many processors, while              
              costing only a few percent overhead over the best sequential C                 
              programs, on one processor.
