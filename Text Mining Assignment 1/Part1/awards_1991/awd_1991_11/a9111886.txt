Title       : Test Algorithms for Physical Neighborhood Pattern Sensitive Faults in
               Reconfigurable RAMS
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : July 20,  1993      
File        : a9111886

Award Number: 9111886
Award Instr.: Continuing grant                             
Prgm Manager: Robert B. Grafton                       
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  1991    
Expires     : September 30,  1995  (Estimated)
Expected
Total Amt.  : $185400             (Estimated)
Investigator: Kewal K. Saluja saluja@engr.wisc.edu  (Principal Investigator current)
Sponsor     : U of Wisconsin Madison
	      750 University Ave
	      Madison, WI  537061490    608/262-3822

NSF Program : 4710      DESIGN AUTOMATION PROGRAM
Fld Applictn: 0104000   Information Systems                     
              0206000   Telecommunications                      
              31        Computer Science & Engineering          
              55        Engineering-Electrical                  
Program Ref : 4710,9148,9215,
Abstract    :
              Saluja         This research addresses testing large, reconfigurable random 
              access memories for faults due to certain patterns originating in  the physical
              neighborhood of a memory cell.  These are pattern  sensitive faults (PSF). 
              Current methods do not deal with 5 and 9  cell neighborhoods, and are complex. 
                In this research, necessary and sufficient conditions to test  check bits for
              neighborhood pattern sensitive faults are being  developed.  Based on these
              results, algorithms to test for 5 and  9 cell physical neighborhood PSFs in
              random access memories  (RAMs) are being designed.  These algorithms deal with
              the cases  where logical and physical address spaces are not identical, 
              memories are reconfigured, and where built in error detection and  correction
              techniques are employed.  The use of these algorithms  for built in self test
              implementation is being explored.                                              
                        
