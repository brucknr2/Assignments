Title       : Compiler Development Using Logic Programming
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : February 23,  1995  
File        : a9115326

Award Number: 9115326
Award Instr.: Continuing grant                             
Prgm Manager: Forbes D. Lewis                         
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : December 1,  1991   
Expires     : December 31,  1994   (Estimated)
Expected
Total Amt.  : $230552             (Estimated)
Investigator: Jacques Cohen jc@cs.brandeis.edu  (Principal Investigator current)
              Timothy J. Hickey  (Co-Principal Investigator current)
Sponsor     : Brandeis University
	      P.O. Box 549110
	      Waltham, MA  024549110    781/736-2121

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9216,
Abstract    :
              The focus of this research is the development of compilers and                 
              interpreters for Constraint Logic Programming (CPL) languages.  This           
              class of languages includes Prolog, and it offers the users the                
              capabilities of solving problems in various domains, such as the               
              reals, booleans, and strings.  Research is planned in the following            
              subareas.                                                                      
                                                                                             
                1. Meta-level interpretation:                                                
                                                                                             
                     Study modular interpretation of CLP languages in various                
                     domains.                                                                
                                                                                             
                2. Optimization:                                                             
                                                                                             
                     Investigate partial evaluation to CLP programs over various             
                     domains.                                                                
                                                                                             
                3. Parallelism:                                                              
                                                                                             
                     Develop accurate performance models of OR-parallel program              
                     execution.                                                              
                                                                                             
                4. Extensions of CLP:                                                        
                                                                                             
                     Integrate functional, set-theoretic, and CLP languages in a             
                     single semantic framework.
