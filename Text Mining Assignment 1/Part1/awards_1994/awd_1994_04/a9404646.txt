Title       : Verifying Compiler Algorithms
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : September 26,  1994 
File        : a9404646

Award Number: 9404646
Award Instr.: Standard Grant                               
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : October 1,  1994    
Expires     : August 31,  1997     (Estimated)
Expected
Total Amt.  : $159679             (Estimated)
Investigator: Mitchell Wand wand@ccs.neu.edu  (Principal Investigator current)
Sponsor     : Northeastern University
	      360 Huntington Avenue
	      Boston, MA  021155096    617/373-5600

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9216,HPCC,
Abstract    :
              9404646  Wand  Because compilers are trusted components of almost every computer
               system, it is important to have trustworthy proofs of their  correctness. 
              This project would continue research on the  development and verification of
              compilers based on formal  specifications of programming languages.  A major
              area of  activity would extend semantics and compiler correctness proofs  to
              languages for parallel computation. Some effort would also be  directed toward
              the study of fundamental theories for object-  oriented programming.   
              Cross-fertilization with related research is expected.  Techniques for
              optimization and concretization would be applied  in the parallel setting, and
              the parallel setting would raise new  problems for studies of optimization. 
              Similarly, existing  activity in type theory is concerned primarily with
              complexity of  type inference algorithms.  It is expected that some of these 
              results to be applied in the object-oriented setting, and that  studies of OOP
              would raise new theoretical questions in type  theory.  ***
