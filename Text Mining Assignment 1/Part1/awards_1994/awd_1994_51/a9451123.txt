Title       : Laboratories for an Object-Oriented Introductory CS Curriculum
Type        : Award
NSF Org     : DUE 
Latest
Amendment
Date        : April 29,  1994     
File        : a9451123

Award Number: 9451123
Award Instr.: Standard Grant                               
Prgm Manager: Theodore J. Sjoerdsma                   
	      DUE  DIVISION OF UNDERGRADUATE EDUCATION     
	      EHR  DIRECT FOR EDUCATION AND HUMAN RESOURCES
Start Date  : July 1,  1994       
Expires     : December 31,  1996   (Estimated)
Expected
Total Amt.  : $100000             (Estimated)
Investigator: Warren R. Carithers wrc@cs.rit.edu  (Principal Investigator current)
              Kenneth A. Reek  (Co-Principal Investigator current)
              Margaret M. Reek  (Co-Principal Investigator current)
              James E. Heliotis  (Co-Principal Investigator current)
              J. Fernando Naveda  (Co-Principal Investigator current)
Sponsor     : Rochester Inst of Tech
	      One Lomb Memorial Drive
	      Rochester, NY  146235603    716/475-2400

NSF Program : 7400      UNDERGRAD INSTRM & LAB IMPROVE
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9178,9267,SMET,
Abstract    :
              9451123  Carithers                            In order to better serve the needs
              of our students, the Department  of Computer Science at RIT has fundamentally
              redesigned the seven  courses in the lower division of our Computer Science
              curriculum.  The revised curriculum introduces the object-oriented programming 
              paradigm immediately, and stresses the view that software  development is no
              longer an exercise practiced by individuals in  isolation, but rather is more
              commonly a cooperative effort  involving members of a team working to produce a
              solution.  Immediate exposure to the object paradigm is a revolutionary 
              approach to Computer Science education which we feel will have  far-reaching
              impact on the field.  Our revision addresses four primary problems: the
              perception that  computing = coding; the disparate backgrounds of entering
              students;  the inability of students to grasp fundamental structures and 
              relationships; and the need for early, sustained emphasis on  software
              engineering. Our solution revolves around the points  mentioned above, through
              early exposure of students to large,  "real-world" examples. Students begin not
              by developing software  from scratch, but by examining and modifying existing
              artifacts,  imprinting them with the principle of software reuse while at the 
              same time illustrating good programming practice in a way which  involves the
              students from the start.  In order to implement this curriculum, a portion of
              our existing  facilities will be upgraded. We will purchase UNIX-based 
              workstations which will provide the resources needed to support the  software
              used in the new curriculum. Both hardware and software are  needed to fully
              support the new curriculum.
