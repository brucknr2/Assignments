Title       : CISE Educational Infrastructure: Can We Unify the Programming Curriculum?
Type        : Award
NSF Org     : EIA 
Latest
Amendment
Date        : August 1,  1996     
File        : a9414170

Award Number: 9414170
Award Instr.: Standard Grant                               
Prgm Manager: Stephen R. Mahaney                      
	      EIA  DIVISION OF EXPERIMENTAL & INTEG ACTIVIT
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : August 15,  1994    
Expires     : July 31,  1997       (Estimated)
Expected
Total Amt.  : $503055             (Estimated)
Investigator: Robert S. Cartwright cork@rice.edu  (Principal Investigator current)
              Bruce Duba  (Co-Principal Investigator current)
              Joe Warren  (Co-Principal Investigator current)
              Matthias Felleisen  (Co-Principal Investigator current)
Sponsor     : William Marsh Rice Univ
	      6100 Main Street, MS-16
	      Houston, TX  772511892    713/348-4820

NSF Program : 2885      CISE RESEARCH INFRASTRUCTURE
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2888,9178,9216,HPCC,SMET,
Abstract    :
              9414170  Cartwright     Programming is founded on two complementary models of
              computation: as algebraic model rooted in mathematical logic and a physical
              model grounded in electrical engineering.  Introductory computing courses
              typically teach only one of these two models and an associated language. 
              Courses devoted to the algebraic model teach Scheme and courses devoted to the
              physical model usually teach C, C++, or Pascal.  There are strong arguments for
              both approaches.  The algebraic model is better for teaching a taxonomy of
              programming concepts and problem solving methods because it is simpler and more
              general.  On the other hand, the physical model provides better preparation for
              the software marketplace and it exposes the structure of the underlying
              machine, which is important in some applications.  The competition between
              these two models has split the programming curriculum -- diminishing course
              standardization and undermining the interfaces between courses.     To exploit
              the strengths of both models and unify the programming curriculum, the Computer
              Science faculty at Rice University proposes to develop the curricular materials
              and software tools required to support the synergistic combination of the two
              models throughout the programming curriculum.  These curricular materials and
              software tools will support:    1) a new introductory computing course that
              teaches both models of computation, their interrelationship, and languages that
              support them (Scheme and C); and    2) the integration of the algebraic model
              into upper level software systems courses that have traditionally focused on
              the physical model.  ***
