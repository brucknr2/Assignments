Title       : A Reliable Software Engineering Environment Using Constraint Propagation
Type        : Award
NSF Org     : DMI 
Latest
Amendment
Date        : June 11,  1993      
File        : a9260866

Award Number: 9260866
Award Instr.: Standard Grant                               
Prgm Manager: Forbes D. Lewis                         
	      DMI  DIV OF DESIGN,MANUFAC & INDUSTRIAL INNOV
	      ENG  DIRECTORATE FOR ENGINEERING             
Start Date  : June 1,  1993       
Expires     : February 28,  1994   (Estimated)
Expected
Total Amt.  : $50000              (Estimated)
Investigator: Karen J. Ulberg   (Principal Investigator current)
Sponsor     : Softworld Inc
	      P.O. Box 50156
	      Raleigh, NC  276506156    919/821-7551

NSF Program : 5371      SMALL BUSINESS PHASE I
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 2845,5371,
Abstract    :
              Software engineering is a composite of data and rules about                    
              how those data are composed, presented to various users, and                   
              transformed as software development proceeds.  An appropriate                  
              computer-aided software engineering environment must easily                    
              handle data and rules.  Currently available commercial                         
              programming languages and database management systems tend to                  
              be able to handle either data or rules well, but not both                      
              simultaneously.                                                                
                                                                                             
              Using a standard RDBMS and an open architecture would allow                    
              CASE tools to be defined as sets of schemas and semantic                       
              rules.  Development would be defined as sets of                                
              transformational rules.  The automatic nature of this approach                 
              improves the reliability of developed software and decreases                   
              the time and cost of it.                                                       
                                                                                             
              Feasibility of the approach will be established by expanding                   
              a previously initiated example application.  The example will                  
              span all views including development and implementation                        
              phases.  The requisite syntactic, and project constraints will                 
              be identified.  A constraint language syntax will be                           
              specified.  Two areas of potential commercialization exist:                    
              (i) an extended constraint subsystem, and (ii) individual CASE                 
              methodology tool rule bases.
