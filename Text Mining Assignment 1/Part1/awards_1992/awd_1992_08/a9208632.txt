Title       : Practical Compile Time Analyses for Evolving C Systems
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : June 6,  1994       
File        : a9208632

Award Number: 9208632
Award Instr.: Continuing grant                             
Prgm Manager: D. Helen Gill                           
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : July 15,  1992      
Expires     : December 31,  1995   (Estimated)
Expected
Total Amt.  : $312639             (Estimated)
Investigator: Barbara G. Ryder ryder@cs.rutgers.edu  (Principal Investigator current)
Sponsor     : Rutgers Univ New Brunswick
	      ASB III, 3 Rutgers Plaza
	      New Brunswick, NJ  08901    732/932-0150

NSF Program : 2880      SOFTWARE ENGINEERING AND LANGU
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9216,9218,HPCC,
Abstract    :
                  In large and evolving software systems, tools such as                      
              compilers, testers, and debuggers require that static                          
              information be maintained and updated.  Data flow analysis                     
              algorithms, which gather facts about use and definition of data                
              in programs, are a major source of this information.                           
              Incremental update algorithms, which only calculate information                
              affected by the program changes, avoiding total recalculation,                 
              efficiently provide consistent documentation for a large,                      
              evolving software system.                                                      
                   In previous research, implementation of incremental                       
              analysis for C systems has been hampered by the imprecision of                 
              the known techniques for determining pointer-induced aliases.                  
              This research aims at developing more precise interprocedural                  
              analyses of C systems, based on the conditional analysis                       
              approach of our pointer aliasing approximation algorithm.                      
              Specifically, it is planned to:                                                
                                                                                             
                        o  optimize the interprocedural pointer aliasing                     
                           approximation algorithm,                                          
                                                                                             
                        o  develop a new, interprocedural modification side                  
                           effect analysis algorithm for C-like languages and                
                           design other flow sensitive data flow analyses                    
                           (e.g., interprocedural reaching definitions, static               
                           program slicing),                                                 
                                                                                             
                        o  build a second prototype incremental MOD analyzer                 
                           for C systems and profile its performance on actual               
                           C systems, and                                                    
                                                                                             
                        o  study issues involved in scaling up for                           
                           programming-in-the-large.
