Title       : Scalable Automatic Transformations for Parallelization of Software
Type        : Award
NSF Org     : CCR 
Latest
Amendment
Date        : September 22,  1994 
File        : a9203319

Award Number: 9203319
Award Instr.: Continuing grant                             
Prgm Manager: Anand R. Tripathi                       
	      CCR  DIV OF COMPUTER-COMMUNICATIONS RESEARCH 
	      CSE  DIRECT FOR COMPUTER & INFO SCIE & ENGINR
Start Date  : June 15,  1992      
Expires     : May 31,  1995        (Estimated)
Expected
Total Amt.  : $335696             (Estimated)
Investigator: Carolyn McCreary   (Principal Investigator current)
Sponsor     : Auburn University
	      202 Samford Hall
	      Auburn, AL  36849    205/826-4000

NSF Program : 2876      OPER SYSTEMS AND COMPILERS
Fld Applictn: 0000099   Other Applications NEC                  
              31        Computer Science & Engineering          
Program Ref : 9216,HPCC,
Abstract    :
                   The goal of this work is to develop a set of techniques for               
              analyzing and re-structuring parallel programs for execution on                
              varying parallel computer architectures.  These techniques will be             
              implemented as a toolkit offering programmers a variety of                     
              transformations to parallelize algorithms for efficient execution on           
              MIMD machines.  The programmer may choose to use all of the                    
              capabilities of the toolkit to generate automatically the parallel             
              program or to use only some of the capabilities to aid in a                    
              particular phase of the parallelization, such as reducing data                 
              dependences or efficient partitioning.  The plan is to integrate the           
              toolkit so that each tool may provide input to a subsequent stage, or          
              may present a graphical representation as guidance to a programmer.            
              This approach allows the tools and techniques to be applied in a               
              variety of settings, including design evaluation, source-to-source             
              transformation, and compilation.                                               
                   The toolkit will integrate and extend component technologies              
              already under development.  These component technologies are:                  
              dependence analysis, clan-based graph parsing, performance                     
              measurement and modeling, cost-based heuristics for grain selection            
              and parallel process construction, and parallel execution and                  
              evaluation frameworks.
